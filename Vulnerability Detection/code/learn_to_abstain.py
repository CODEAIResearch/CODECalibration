from __future__ import absolute_import, division, print_function

import argparse
import logging
import os

import math

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import numpy as np
import torch
from torch.utils.data import DataLoader, Dataset, SequentialSampler
from torch.utils.data.distributed import DistributedSampler
import json


from tqdm import tqdm, trange
import multiprocessing
from model import Model, DecoderClassifier

cpu_cont = multiprocessing.cpu_count()

from accelerate import Accelerator
from accelerate.logging import get_logger
from accelerate.utils import set_seed

from transformers import BitsAndBytesConfig, TrainingArguments, pipeline
from peft import LoraConfig
from peft import get_peft_config, PeftModel, PeftConfig, get_peft_model, LoraConfig, TaskType
from torch.optim import AdamW

from transformers import (WEIGHTS_NAME, get_linear_schedule_with_warmup, get_scheduler,
                          BertConfig, BertForMaskedLM, BertTokenizer, BertForSequenceClassification,
                          GPT2Config, GPT2LMHeadModel, GPT2Tokenizer,
                          OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer,
                          RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer,
                          DistilBertConfig, DistilBertForMaskedLM, DistilBertForSequenceClassification, DistilBertTokenizer, 
                          AutoConfig, AutoModel, AutoTokenizer)

logger = logging.getLogger(__name__)

MODEL_CLASSES = {
    'gpt2': (GPT2Config, GPT2LMHeadModel, GPT2Tokenizer),
    'openai-gpt': (OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer),
    'bert': (BertConfig, BertForSequenceClassification, BertTokenizer),
    'roberta': (RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer),
    'distilbert': (DistilBertConfig, DistilBertForSequenceClassification, DistilBertTokenizer),
    'codellama' : (AutoConfig,AutoModel, AutoTokenizer),
    'deepseek' : (AutoConfig,AutoModel, AutoTokenizer),
    'qwen7b' : (AutoConfig,AutoModel, AutoTokenizer),
    'starcoder3b' : (AutoConfig,AutoModel, AutoTokenizer),
    'incoder1b' : (AutoConfig,AutoModel, AutoTokenizer),
    'codegemma' : (AutoConfig,AutoModel, AutoTokenizer)
    }

import os
logger = get_logger(__name__)

class InputFeatures(object):
    """A single training/test features for a example."""
    def __init__(self,
                 input_tokens,
                 input_ids,
                 idx,
                 label,

    ):
        self.input_tokens = input_tokens
        self.input_ids = input_ids
        self.idx=str(idx)
        self.label=label

def convert_examples_to_features(js,tokenizer,args):
    code = js['func']
    if args.model_type in ["codellama"]:
        code_tokens = tokenizer.tokenize(code)
        if '</s>' in code_tokens:
            code_tokens = code_tokens[:code_tokens.index('</s>')]
        source_tokens = code_tokens[:args.block_size]
    elif args.model_type in ["starcoder3b", "deepseek", "incoder1b",'qwen7b']:
        code_tokens=tokenizer.tokenize(code)
        source_tokens = code_tokens[:args.block_size]
    else:
        code_tokens=tokenizer.tokenize(code)
        code_tokens = code_tokens[:args.block_size-2]
        source_tokens =[tokenizer.cls_token]+code_tokens+[tokenizer.sep_token]
    if args.model_type in ["codellama"]:
        source_ids = tokenizer.encode(js['func'].split("</s>")[0], max_length=args.block_size, padding='max_length', truncation=True)
    else:
        source_ids = tokenizer.encode(
            code,
            max_length=args.block_size,
            padding='max_length',
            truncation=True,
            add_special_tokens=False,  # decoder-only style
        )

        #source_ids =  tokenizer.convert_tokens_to_ids(source_tokens)
        #padding_length = args.block_size - len(source_ids)
        #source_ids+=[tokenizer.pad_token_id]*padding_length
    return InputFeatures(source_tokens,source_ids,js['idx'],js['target'])

class TextDataset(Dataset):
    def __init__(self, tokenizer, args, file_path=None):
        self.examples = []
        with open(file_path) as f:
            for line in f:
                js=json.loads(line.strip())
                self.examples.append(convert_examples_to_features(js,tokenizer,args))


    def __len__(self):
        return len(self.examples)

    def __getitem__(self, i):       
        return torch.tensor(self.examples[i].input_ids),torch.tensor(self.examples[i].label)



def train(args, accelerator, train_dataset, eval_dataset, model, tokenizer):
    """ Train the model """
    train_dataloader = DataLoader(train_dataset, shuffle=True, batch_size=args.train_batch_size, num_workers=4)
    args.eval_batch_size = args.per_gpu_eval_batch_size * max(1, args.n_gpu)
    # eval_sampler = SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)
    eval_dataloader = DataLoader(eval_dataset, shuffle=False, batch_size=args.eval_batch_size, num_workers=4)

    num_update_steps_per_epoch = math.ceil(len(train_dataloader) / args.gradient_accumulation_steps)
    args.max_steps = args.epoch*num_update_steps_per_epoch
    args.save_steps = len(train_dataloader)
    args.num_train_epochs = args.epoch
    # model.to(args.device)
    # Prepare optimizer and schedule (linear warmup and decay)
    no_decay = ['bias', 'LayerNorm.weight']
    optimizer_grouped_parameters = [
        {'params': [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)],
         'weight_decay': args.weight_decay},
        {'params': [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
    ]
    optimizer = AdamW(optimizer_grouped_parameters, lr=args.learning_rate, eps=args.adam_epsilon)
    if args.warmup_steps == 0:
        num_warmup = args.max_steps * args.warmup_ratio
    else:
        num_warmup = args.warmup_steps
    scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=num_warmup,
                                                num_training_steps=args.max_steps)
   
    # Train!
    total_batch_size = args.train_batch_size * accelerator.num_processes * accelerator.gradient_accumulation_steps
    logger.info("***** Running training *****")
    logger.info("  Num examples = %d", len(train_dataset))
    logger.info("  Num Epochs = %d", args.num_train_epochs)
    logger.info("  Instantaneous batch size per GPU = %d", args.train_batch_size)
    logger.info("  Total train batch size (w. parallel, distributed & accumulation) = %d",
                total_batch_size)
    logger.info("  Gradient Accumulation steps = %d", args.gradient_accumulation_steps)
    logger.info("  Total optimization steps = %d", args.max_steps)
    
    tr_loss, logging_loss, avg_loss, tr_nb, tr_num, train_loss = 0.0, 0.0, 0.0, 0, 0, 0
    best_f1=0.0
    best_acc=0.0
    patience = 0

    train_dataloader, eval_dataloader, model, optimizer, scheduler = accelerator.prepare(
        train_dataloader, eval_dataloader, model, optimizer, scheduler
    )
    model.zero_grad()
 
    step = 0
    for idx in range(args.start_epoch, int(args.num_train_epochs)): 
        bar = tqdm(train_dataloader, total=len(train_dataloader), disable=not accelerator.is_local_main_process)
        tr_num = 0
        train_loss = 0
        logits_lst = []
        labels_lst = []
        for local_step, batch in enumerate(bar):
            model.train()
            inputs, labels = batch
            with accelerator.accumulate(model):
                #print(f"Batch Inputs Shape: {inputs.shape}, Labels: {labels}")
                #loss, logits = model(input_ids=inputs, labels=labels)
                loss, logits = model(input_ids=inputs, labels=labels,
                        epoch=idx, loss_mode="sat_em", E_s=1, gamma=0.5, beta=0.01)
                accelerator.backward(loss)
                accelerator.clip_grad_norm_(model.parameters(), args.max_grad_norm)
                optimizer.step()
                scheduler.step()
                optimizer.zero_grad()
                
            logits, labels = accelerator.gather_for_metrics((logits, labels))
            
            # cast to torch.float16
            logits_lst.append(logits.detach().cpu().float().numpy())
            labels_lst.append(labels.detach().cpu().float().numpy())

            step_loss = accelerator.reduce(loss.detach().clone()).item()
            tr_loss += step_loss    
            tr_num += 1
            train_loss += step_loss
            if avg_loss == 0:
                avg_loss = tr_loss
            avg_loss = round(train_loss/tr_num, 5)
            bar.set_description("epoch {} loss {}".format(idx, avg_loss))
                
            ###
            # log the first model
            ###
            if step == 0:
                avg_loss = round(train_loss/tr_num,5)
                # train_acc, train_prec, train_recall, train_f1, train_tnr, train_fpr, train_fnr = calculate_metrics(step_labels_lst, step_preds_lst)
                if args.evaluate_during_training:  # Only evaluate when single GPU otherwise metrics may not average well
                    results = evaluate(args, accelerator, eval_dataloader, eval_dataset, model, tokenizer, eval_when_training=True)
                    for key, value in results.items():
                        logger.info("  %s = %s", key, round(value, 4))                   
            
            ###
            # log after every logging_steps (e.g., 1000)
            ###
            """if (step + 1) % args.logging_steps == 0:
                avg_loss=round(train_loss/tr_num,5)
                # train_acc, train_prec, train_recall, train_f1, train_tnr, train_fpr, train_fnr = calculate_metrics(step_labels_lst, step_preds_lst)
                if args.evaluate_during_training:  # Only evaluate when single GPU otherwise metrics may not average well
                    results = evaluate(args, accelerator, eval_dataloader, eval_dataset, model, tokenizer,eval_when_training=True)
                    for key, value in results.items():
                        logger.info("  %s = %s", key, round(value,4))                    
                
                # Save model checkpoint    
                if results['eval_f1']>best_f1:
                    best_f1=results['eval_f1']
                    logger.info("  "+"*"*20)  
                    logger.info("  Best f1:%s",round(best_f1,4))
                    logger.info("  "+"*"*20)                          
                    
                    checkpoint_prefix = f'checkpoint-best-f1/{args.project}'
                    output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))                        
                    if not os.path.exists(output_dir):
                        os.makedirs(output_dir, exist_ok=True)    
                    accelerator.save_state(output_dir)
                    logger.info(f"Saving best f1 model checkpoint at epoch {idx} step {step} to {output_dir}")"""
            
            # increment step within the same epoch
            step += 1
            torch.cuda.empty_cache()
        ###
        # log after every epoch
        ###
        avg_loss=round(train_loss/tr_num,5)
        logits_lst=np.concatenate(logits_lst,0)
        labels_lst=np.concatenate(labels_lst,0)
        # train_acc, train_prec, train_recall, train_f1, train_tnr, train_fpr, train_fnr = calculate_metrics(labels_lst, preds_lst)
        
        if args.local_rank in [-1, 0]:
            if args.evaluate_during_training:  # Only evaluate when single GPU otherwise metrics may not average well
                results = evaluate(args, accelerator, eval_dataloader, eval_dataset, model, tokenizer,eval_when_training=True)
                for key, value in results.items():
                    logger.info("  %s = %s", key, round(value,4))                    
            
            # save model checkpoint at ep10
            if idx == 9:
                checkpoint_prefix = f'checkpoint-acsac/baseline1'
                output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))                        
                if not os.path.exists(output_dir):
                    os.makedirs(output_dir, exist_ok=True)                        
                accelerator.save_state(output_dir)
                logger.info(f"ACSAC: Saving model checkpoint at epoch {idx} to {output_dir}")
            
            # Save model checkpoint    
            if results['eval_f1']>best_f1:
                best_f1=results['eval_f1']
                logger.info("  "+"*"*20)  
                logger.info("  Best f1:%s",round(best_f1,4))
                logger.info("  "+"*"*20)                          
                
                checkpoint_prefix = f'checkpoint-best-f1/baseline1'
                output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))                        
                if not os.path.exists(output_dir):
                    os.makedirs(output_dir, exist_ok=True)                        
                accelerator.save_state(output_dir)
                logger.info(f"Saving best f1 model checkpoint at epoch {idx} to {output_dir}")
                patience = 0
            else:
                patience += 1

            if results['eval_acc']>best_acc:
                best_acc=results['eval_acc']
                logger.info("  "+"*"*20)
                logger.info("  Best acc:%s",round(best_acc,4))
                logger.info("  "+"*"*20)                          
                
                checkpoint_prefix = f'checkpoint-best-acc/baseline1'
                output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))                        
                if not os.path.exists(output_dir):
                    os.makedirs(output_dir, exist_ok=True)                        
                accelerator.save_state(output_dir)
                logger.info(f"Saving best acc model checkpoint at epoch {idx} to {output_dir}")
                patience = 0
            else:
                patience += 1
        if patience == args.max_patience:
            logger.info(f"Reached max patience {args.max_patience}. End training now.")
            if best_f1 == 0.0:
                checkpoint_prefix = f'checkpoint-best-f1/baseline1'
                output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))                        
                if not os.path.exists(output_dir):
                    os.makedirs(output_dir, exist_ok=True)                        
                accelerator.save_state(output_dir)
                logger.info("Saving model checkpoint to %s", output_dir)
            break
    # writer.close()
    if args.do_test:
        checkpoint_prefix = f'checkpoint-best-f1/baseline1'
        output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))
        accelerator.load_state(output_dir)
        result = test(args, accelerator, model, tokenizer) 
        logger.info("***** Test results *****")
        for key in sorted(result.keys()):
            logger.info("  %s = %s", key, str(round(result[key],4)))              

def calculate_metrics(labels, preds):
    acc=accuracy_score(labels, preds)
    prec = precision_score(labels, preds, average="macro")
    recall = recall_score(labels, preds, average="macro")
    f1 = f1_score(labels, preds, average="macro")

    # Confusion matrix only works in binary if you ravel()
    cm = confusion_matrix(labels, preds)
    if cm.shape == (2, 2):
        TN, FP, FN, TP = cm.ravel()
        tnr = TN / (TN + FP)
        fpr = FP / (FP + TN)
        fnr = FN / (TP + FN)
    else:
        tnr = fpr = fnr = float("nan")

    return (
        round(acc,4)*100,
        round(prec,4)*100,
        round(recall,4)*100,
        round(f1,4)*100,
        tnr, fpr, fnr
    )

def evaluate(args, accelerator, eval_dataloader, eval_dataset, model, tokenizer, eval_when_training=False):
    # Loop to handle MNLI double evaluation (matched, mis-matched)
    eval_output_dir = args.output_dir

    if not os.path.exists(eval_output_dir) and args.local_rank in [-1, 0]:
        os.makedirs(eval_output_dir, exist_ok=True)

    args.eval_batch_size = args.per_gpu_eval_batch_size * max(1, args.n_gpu)

    # Eval!
    logger.info("***** Running evaluation *****")
    logger.info("  Num examples = %d", len(eval_dataset))
    logger.info("  Batch size = %d", args.eval_batch_size)
    
    model.eval()
    losses = []
    logits = [] 
    labels = []
    for batch in tqdm(eval_dataloader):
        inputs, label = batch
        with torch.no_grad():
            #lm_loss,logit = model(input_ids=inputs, labels=label)
            lm_loss, logit = model(input_ids=inputs, labels=label,
                        epoch=2, loss_mode="sat_em", E_s=1, gamma=0.5, beta=0.01)
        
        losses.append(accelerator.gather_for_metrics(lm_loss.repeat(args.eval_batch_size)))
        logit, label = accelerator.gather_for_metrics((logit, label))
        logits.append(logit.cpu().float().numpy())
        labels.append(label.cpu().float().numpy())
    
    losses = torch.cat(losses)
    eval_loss = torch.mean(losses)
    logits=np.concatenate(logits,0)
    labels=np.concatenate(labels,0)
    class_labels = torch.argmax(torch.tensor(logits), dim=1).cpu().numpy()

    """if args.model_type in set(['codegen', 'starcoder']):
        preds=logits[:,1]>0.5
    else:
        preds=logits[:,0]>0.5"""
    eval_acc, eval_prec, eval_recall, eval_f1, eval_tnr, eval_fpr, eval_fnr = calculate_metrics(labels, class_labels)
    perplexity = torch.tensor(eval_loss)

    result = {
        "eval_loss": float(perplexity),
        "eval_acc": eval_acc,
        "eval_prec": eval_prec,
        "eval_recall": eval_recall,
        "eval_f1": eval_f1,
        "eval_tnr": eval_tnr,
        "eval_fpr": eval_fpr,
        "eval_fnr": eval_fnr,
    }
    return result

def load_data(jsonl_path):
    '''
    Load data from jsonl file
    '''
    with open(jsonl_path, 'r') as f:
        data = [json.loads(line.rstrip()) for line in f]
    return data

def analyze_predictions(predictions_path, data_path):
    data = load_data(data_path)
    predictions = []
    with open(predictions_path, 'r') as f:
        for line in f:
            id, pred = line.strip().split('\t')
            id = int(id)
            pred = int(pred)
            predictions.append({"id": id, "pred": pred})
    
    assert len(predictions) == len(data)
    assert len(predictions) % 2 == 0
    num_acc = 0
    num_all_vul = 0
    num_all_sec = 0
    num_reversed = 0
    for i in range(len(predictions) // 2):
        assert predictions[2 * i]['id'] == data[2 * i]['idx']
        assert predictions[2 * i + 1]['id'] == data[2 * i + 1]['idx']
        assert data[2 * i]["commit_id"] == data[2 * i + 1]["commit_id"]
        if predictions[2 * i]['pred'] == data[2 * i]['target'] and predictions[2 * i + 1]['pred'] == data[2 * i + 1]['target']:
            num_acc += 1
        elif predictions[2 * i]['pred'] == predictions[2 * i + 1]['pred'] and predictions[2 * i]['pred'] == 0:
            num_all_sec += 1
        elif predictions[2 * i]['pred'] == predictions[2 * i + 1]['pred'] and predictions[2 * i]['pred'] == 1:
            num_all_vul += 1
        else:
            num_reversed += 1

    print("num_acc: {}".format(num_acc))
    print("num_all_sec: {}".format(num_all_sec))
    print("num_all_vul: {}".format(num_all_vul))
    print("num_reversed: {}".format(num_reversed))

def test(args, accelerator, model, tokenizer):
    # Loop to handle MNLI double evaluation (matched, mis-matched)
    eval_dataset = TextDataset(tokenizer, args, args.test_data_file)
    args.eval_batch_size = args.per_gpu_eval_batch_size * max(1, args.n_gpu)
    eval_dataloader = DataLoader(eval_dataset, shuffle=False, batch_size=args.eval_batch_size)

    eval_dataloader = accelerator.prepare(eval_dataloader)

    logger.info("***** Running Test *****")
    logger.info("  Num examples = %d", len(eval_dataset))
    logger.info("  Batch size = %d", args.eval_batch_size)
    model.eval()
    logits=[]   
    labels=[]
    for batch in tqdm(eval_dataloader,total=len(eval_dataloader)):
        inputs, label = batch
        with torch.no_grad():
            #logit = model(input_ids=inputs)  
            scores, logit = model(input_ids=inputs) 
        logit, label = accelerator.gather_for_metrics((logit, label))
        logits.append(logit.cpu().float().numpy())
        labels.append(label.cpu().float().numpy())

    logits=np.concatenate(logits,0)
    labels=np.concatenate(labels,0)

    class_labels = torch.argmax(torch.tensor(logits), dim=1).cpu().numpy()


    test_acc, test_prec, test_recall, test_f1, test_tnr, test_fpr, test_fnr = calculate_metrics(labels, class_labels)

    result = {
        "test_acc": test_acc,
        "test_prec": test_prec,
        "test_recall": test_recall,
        "test_f1": test_f1,
        "test_tnr": test_tnr,
        "test_tnr": test_tnr,
        "test_fnr": test_fnr,
    }
    return result

    """if args.model_type in set(['codegen', 'starcoder']):
        preds=logits[:,1]>0.5
        vuln_scores = logits[:,1].tolist()
    else:
        preds=logits[:,0]>0.5
        vuln_scores = logits[:,0].tolist()
    os.makedirs(os.path.join(args.output_dir, args.project), exist_ok=True)

    if accelerator.is_main_process:
        if args.test_cwe == None:
            with open(os.path.join(args.output_dir, args.project, "predictions.txt"),'w') as f:
                for example,pred,vs in zip(eval_dataset.examples,preds,vuln_scores):
                    if pred:
                        f.write(example.idx+f'\t1\t{vs}\n')
                    else:
                        f.write(example.idx+f'\t0\t{vs}\n')
        else:
            with open(os.path.join(args.output_dir, args.project, f"predictions_{args.test_cwe}.txt"),'w') as f:
                for example,pred in zip(eval_dataset.examples,preds):
                    if pred:
                        f.write(example.idx+'\t1\n')
                    else:
                        f.write(example.idx+'\t0\n')   

    test_acc, test_prec, test_recall, test_f1, test_tnr, test_fpr, test_fnr = calculate_metrics(labels, preds)

    accelerator.wait_for_everyone()

    if accelerator.is_main_process:
        try:
            analyze_predictions(os.path.join(args.output_dir, args.project, "predictions.txt"), args.test_data_file)
        except Exception as e:
            print(e)
            pass
            

    result = {
        "test_acc": test_acc,
        "test_prec": test_prec,
        "test_recall": test_recall,
        "test_f1": test_f1,
        "test_tnr": test_tnr,
        "test_tnr": test_tnr,
        "test_fnr": test_fnr,
    }
    return result """
    
def test_prob(args, model, tokenizer):
    eval_dataset = TextDataset(tokenizer, args,args.test_data_file)

    args.eval_batch_size = args.per_gpu_eval_batch_size * max(1, args.n_gpu)
    # Note that DistributedSampler samples randomly
    eval_sampler = SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)
    eval_dataloader = DataLoader(eval_dataset, sampler=eval_sampler, batch_size=args.eval_batch_size)

    # multi-gpu evaluate
    if args.n_gpu > 1:
        model = torch.nn.DataParallel(model)

    # Eval!
    logger.info("***** Running Test *****")
    logger.info("  Num examples = %d", len(eval_dataset))
    logger.info("  Batch size = %d", args.eval_batch_size)
    eval_loss = 0.0
    nb_eval_steps = 0
    model.eval()
    logits=[]   
    labels=[]
    for batch in tqdm(eval_dataloader,total=len(eval_dataloader)):
        inputs = batch[0].to(args.device)        
        label=batch[1].to(args.device) 
        with torch.no_grad():
            #logit = model(input_ids=inputs)
            scores, logit = model(input_ids=inputs) 
            logits.append(logit.cpu().float().numpy())
            labels.append(label.cpu().float().numpy())

    logits=np.concatenate(logits,0)
    labels=np.concatenate(labels,0)
    #soft_preds=logits[:,0]
    class_labels = torch.argmax(torch.tensor(logits), dim=1).cpu().numpy()

    with open(os.path.join(args.output_dir, "predictions.txt"), "w") as f:
        for example,pred in zip(eval_dataset.examples,class_labels):
            f.write(f"{example.idx}\t{pred}\n")
    """os.makedirs(os.path.join(args.output_dir, args.project), exist_ok=True)
    if args.test_cwe == None:
        with open(os.path.join(args.output_dir, args.project, "predictions.txt"),'w') as f:
            for example,pred in zip(eval_dataset.examples,soft_preds):
                f.write(example.idx+'\t%f\n' % pred)
    else:
        with open(os.path.join(args.output_dir, args.project, f"predictions_{args.test_cwe}.txt"),'w') as f:
            for example,pred in zip(eval_dataset.examples,soft_preds):
                f.write(example.idx+'\t%f\n' % pred)"""


import os, json, csv, numpy as np, torch
import torch.nn as nn
import torch.nn.functional as F
from tqdm import tqdm
from torch.utils.data import DataLoader, SequentialSampler, DistributedSampler

# =========================
# utils
# =========================
def _to_numpy(x):
    if isinstance(x, np.ndarray): 
        return x
    if torch.is_tensor(x): 
        return x.detach().cpu().numpy()
    return np.asarray(x)

def _np1(x):
    a = _to_numpy(x)
    return a.reshape(-1)

def _np2(x):
    a = _to_numpy(x)
    if a.ndim != 2:
        raise ValueError(f"Expected 2D array, got shape {a.shape}")
    return a

def _maybe_logger():
    try:
        return logger  # provided by your env if present
    except Exception:
        import logging
        lg = logging.getLogger("sr_eval")
        if not lg.handlers:
            lg.setLevel(logging.INFO)
            h = logging.StreamHandler()
            h.setFormatter(logging.Formatter("[%(levelname)s] %(message)s"))
            lg.addHandler(h)
        return lg

# =========================
# metrics
# =========================
def ece_on_accepted(probs_task, y_true, yhat, accept_mask, n_bins=15):
    P    = _np2(probs_task)
    y    = _np1(y_true)
    yh   = _np1(yhat)
    keep = _np1(accept_mask).astype(bool)
    if keep.sum() == 0: 
        return float("nan")
    conf = P[np.arange(len(y)), yh]
    conf = conf[keep]
    yk   = (yh[keep] == y[keep]).astype(np.float32)
    bins = np.linspace(0., 1., n_bins+1)
    ece  = 0.0; total = len(conf)
    for i in range(n_bins):
        m = (conf >= bins[i]) & (conf < bins[i+1] if i < n_bins-1 else conf <= bins[i+1])
        if m.any():
            ece += (m.sum()/total) * abs(yk[m].mean() - conf[m].mean())
    return float(ece)

def overall_ece(probs_task, y_true, yhat, n_bins=15):
    P  = _np2(probs_task)
    y  = _np1(y_true)
    yh = _np1(yhat)
    if len(y) == 0: 
        return float("nan")
    conf = P[np.arange(len(y)), yh]
    corr = (yh == y).astype(np.float32)
    bins = np.linspace(0., 1., n_bins+1)
    ece  = 0.0; total = len(conf)
    for i in range(n_bins):
        m = (conf >= bins[i]) & (conf < bins[i+1] if i < n_bins-1 else conf <= bins[i+1])
        if m.any():
            ece += (m.sum()/total) * abs(corr[m].mean() - conf[m].mean())
    return float(ece)

def rc_curve_and_aurc(y_true, scores, yhat):
    """Dense RC on TEST (prefixes k=1..N) + AURC/E-AURC."""
    y  = _np1(y_true)
    s  = _np1(scores)
    yh = _np1(yhat)
    correct = (yh == y).astype(np.int32)
    N = len(y)
    if N == 0:
        empty = {"coverage_curve": [], "risk_curve": [], "acc_curve": []}
        return {**empty, "AURC": float("nan"), "AURC_oracle": float("nan"), "E_AURC": float("nan")}
    order = np.argsort(-s)
    corr_sorted = correct[order]
    k = np.arange(1, N+1)
    cov = k / N
    acc = np.cumsum(corr_sorted) / k
    risk = 1.0 - acc
    aurc = float(np.trapz(risk, cov))
    corr_or = np.sort(correct)[::-1]
    acc_or  = np.cumsum(corr_or) / k
    risk_or = 1.0 - acc_or
    aurc_or = float(np.trapz(risk_or, cov))
    return {
        "coverage_curve": cov.tolist(),
        "risk_curve": risk.tolist(),
        "acc_curve": acc.tolist(),
        "AURC": aurc,
        "AURC_oracle": aurc_or,
        "E_AURC": aurc - aurc_or,
    }

# =========================
# CSV writers
# =========================
def save_rc_csv(save_dir, rc, filename):
    os.makedirs(save_dir, exist_ok=True)
    path = os.path.join(save_dir, filename)
    with open(path, "w") as f:
        f.write("coverage,risk,accuracy\n")
        for cov, r, a in zip(rc["coverage_curve"], rc["risk_curve"], rc["acc_curve"]):
            f.write(f"{cov},{r},{a}\n")

def save_overall_metrics_csv(save_dir, rc, metrics, filename):
    """One-row CSV with plain acc, overall ECE, AURC, AURC_oracle, E_AURC, AUACC."""
    os.makedirs(save_dir, exist_ok=True)
    aurc      = rc.get("AURC", float("nan"))
    aurc_or   = rc.get("AURC_oracle", float("nan"))
    e_aurc    = rc.get("E_AURC", float("nan"))
    auacc     = (1.0 - aurc) if isinstance(aurc, float) else float("nan")
    plain_acc = float(metrics.get("plain_task_acc", float("nan")))
    overall_ece_v = float(metrics.get("overall_ECE", float("nan")))
    path = os.path.join(save_dir, filename)
    with open(path, "w") as f:
        f.write("plain_task_acc,overall_ECE,AURC,AURC_oracle,E_AURC,AUACC\n")
        f.write(f"{plain_acc},{overall_ece_v},{aurc},{aurc_or},{e_aurc},{auacc}\n")

def save_acc_risk_table_csv(save_dir, metrics_by_c, filename):
    """Long-form table across requested coverages (tau, coverage, sel-acc, sel-risk, counts, ECE@accepted)."""
    os.makedirs(save_dir, exist_ok=True)
    path = os.path.join(save_dir, filename)
    with open(path, "w") as f:
        f.write("coverage,tau,selective_accuracy,selective_risk,n_accept,n_total,ECE_on_accepted\n")
        for c in sorted([k for k in metrics_by_c.keys() if isinstance(k, float)]):
            m = metrics_by_c[c]
            f.write(f"{c:.2f},{m['tau']},{m['selective_accuracy']},{m['selective_risk']},{m['n_accept']},{m['n_total']},{m['ECE_on_accepted']}\n")

def compute_per_class_metrics_by_true(y_true, yhat, accept_masks_by_c, n_classes):
    """Per TRUE-class selective acc/risk at each coverage."""
    y  = _np1(y_true)
    yh = _np1(yhat)
    rows = []
    for c in sorted(accept_masks_by_c.keys()):
        keep = _np1(accept_masks_by_c[c]).astype(bool)
        for cls in range(n_classes):
            cls_mask_total = (y == cls)
            cls_mask_keep  = cls_mask_total & keep
            n_total_cls  = int(cls_mask_total.sum())
            n_accept_cls = int(cls_mask_keep.sum())
            if n_accept_cls > 0:
                sel_acc_cls  = float((yh[cls_mask_keep] == y[cls_mask_keep]).mean())
                sel_risk_cls = 1.0 - sel_acc_cls
            else:
                sel_acc_cls = float("nan")
                sel_risk_cls = float("nan")
            rows.append({
                "class": int(cls),
                "coverage": float(c),
                "sel_acc_cls": sel_acc_cls,
                "sel_risk_cls": sel_risk_cls,
                "n_accept_cls": n_accept_cls,
                "n_total_cls": n_total_cls,
            })
    return rows

def compute_per_class_metrics_by_pred(y_true, yhat, accept_masks_by_c, n_classes):
    """Per PREDICTED-class selective acc/risk at each coverage."""
    y  = _np1(y_true)
    yh = _np1(yhat)
    rows = []
    for c in sorted(accept_masks_by_c.keys()):
        keep = _np1(accept_masks_by_c[c]).astype(bool)
        for cls in range(n_classes):
            pred_mask_total = (yh == cls)
            pred_mask_keep  = pred_mask_total & keep
            n_total_cls  = int(pred_mask_total.sum())
            n_accept_cls = int(pred_mask_keep.sum())
            if n_accept_cls > 0:
                sel_acc_cls  = float((yh[pred_mask_keep] == y[pred_mask_keep]).mean())
                sel_risk_cls = 1.0 - sel_acc_cls
            else:
                sel_acc_cls = float("nan")
                sel_risk_cls = float("nan")
            rows.append({
                "pred_class": int(cls),
                "coverage": float(c),
                "sel_acc_cls": sel_acc_cls,
                "sel_risk_cls": sel_risk_cls,
                "n_accept_cls": n_accept_cls,
                "n_total_cls": n_total_cls,
            })
    return rows

def save_per_class_metrics_csv(save_dir, rows, filename, predicted=False):
    os.makedirs(save_dir, exist_ok=True)
    path = os.path.join(save_dir, filename)
    with open(path, "w") as f:
        if predicted:
            f.write("pred_class,coverage,sel_acc_cls,sel_risk_cls,n_accept_cls,n_total_cls\n")
            for r in rows:
                f.write(f"{r['pred_class']},{r['coverage']:.2f},{r['sel_acc_cls']},{r['sel_risk_cls']},{r['n_accept_cls']},{r['n_total_cls']}\n")
        else:
            f.write("class,coverage,sel_acc_cls,sel_risk_cls,n_accept_cls,n_total_cls\n")
            for r in rows:
                f.write(f"{r['class']},{r['coverage']:.2f},{r['sel_acc_cls']},{r['sel_risk_cls']},{r['n_accept_cls']},{r['n_total_cls']}\n")

# =========================
# data collection (MSP using model's probs_all)
# =========================
@torch.no_grad()
def _collect_y_score_pred_MSP(model, loader, device, exclude_last_class=True):
    """
    Uses ONLY model's probs_all (already softmaxed).
    Model forward (inference) returns: (pooled_logits, probs_all) OR (loss, probs_all) if labels were passed.
    We ignore logits/loss and take probs_all.
    Returns:
      y_true: [N]
      msp: [N]                # max prob over TASK classes (excludes abstain if requested)
      yhat_task: [N]          # argmax over TASK classes
      probs_task: [N, M]      # TASK-class probabilities (no re-softmax)
    """
    model.eval()
    ys, scores, preds, probs_task_list = [], [], [], []

    for batch in tqdm(loader, total=len(loader)):
        # adjust to your dataset's batch structure
        x = batch[0].to(device)
        y = batch[1].to(device)

        out = model(input_ids=x)   # labels=None → inference path
        # out could be (pooled_logits, probs_all) or just probs_all if you changed returns
        if isinstance(out, (list, tuple)) and len(out) >= 2:
            probs_all = out[1]
        else:
            # if your forward returns just probs_all at inference
            probs_all = out

        # probs_all: [B, M+1] where last is abstain; otherwise [B, M]
        C_all = probs_all.size(1)
        if exclude_last_class and C_all >= 2:
            probs_task = probs_all[:, :C_all-1]
        else:
            probs_task = probs_all

        # MSP score & predicted task class
        msp, yhat = probs_task.max(dim=1)

        ys.append(y.cpu())
        scores.append(msp.cpu())
        preds.append(yhat.cpu())
        probs_task_list.append(probs_task.cpu())

    y_true     = torch.cat(ys).numpy()
    msp_arr    = torch.cat(scores).numpy()
    yhat_task  = torch.cat(preds).numpy()
    probs_task = torch.cat(probs_task_list).numpy()
    return y_true, msp_arr, yhat_task, probs_task

# =========================
# exact test-coverage evaluation (top-k on TEST)
# =========================
def _evaluate_exact_topk(y_true, scores_test, yhat_test, probs_task_test, coverages):
    """
    EXACT test coverages via top-k on TEST.
    Returns:
      metrics: dict with plain_task_acc and per-c metrics
      accept_masks_by_c: {c -> [N] bool}
      taus_test: {c -> kth largest score on TEST}
    """
    y = _np1(y_true)
    s = _np1(scores_test)
    yh = _np1(yhat_test)
    P = _np2(probs_task_test)
    N = len(y)

    order = np.argsort(-s)  # high→low
    s_sorted = s[order]

    metrics = {"plain_task_acc": float((yh == y).mean()) if N else float("nan")}
    accept_masks_by_c = {}
    taus_test = {}

    for c in map(float, coverages):
        k = int(np.floor(c * N))
        k = min(max(k, 1), N)  # ensure [1, N]
        keep = np.zeros(N, dtype=bool)
        keep[order[:k]] = True

        sel_acc = float((yh[keep] == y[keep]).mean()) if k > 0 else float("nan")

        accept_masks_by_c[c] = keep
        taus_test[c] = float(s_sorted[k-1])

        metrics[c] = {
            "tau": taus_test[c],                 # kth largest score (for reference)
            "coverage": k / N,                   # achieved exact k/N
            "selective_accuracy": sel_acc,
            "selective_risk": (1.0 - sel_acc) if k > 0 else float("nan"),
            "n_accept": int(k), "n_total": int(N),
            "ECE_on_accepted": ece_on_accepted(P, y, yh, keep, n_bins=15),
        }
    return metrics, accept_masks_by_c, taus_test

# =========================
# main entry
# =========================
def test_prob_selective_SR(
    args, model, tokenizer,
    coverages=None,
    exclude_last_class=True,
    save_prefix="sr_msp"
):
    """
    MSP-based selective evaluation using ONLY model's probs_all (no logits, no softmax).
    Saves: RC curve, accuracy-risk table, overall metrics (AURC/E-AURC/AUACC), per-class metrics, taus, predictions.
    """
    lg = _maybe_logger()

    if coverages is None:
        coverages = [round(x, 2) for x in np.arange(0.10, 1.01, 0.10)]

    # --- Datasets/loaders (adapt to your project as needed) ---
    test_dataset  = TextDataset(tokenizer, args, args.test_data_file)  # noqa: F821
    if args.local_rank == -1:
        test_sampler = SequentialSampler(test_dataset)
    else:
        test_sampler = DistributedSampler(test_dataset)

    args.eval_batch_size = args.per_gpu_eval_batch_size * max(1, args.n_gpu)
    test_loader = DataLoader(test_dataset, sampler=test_sampler, batch_size=args.eval_batch_size)

    if getattr(args, "n_gpu", 1) > 1:
        model = torch.nn.DataParallel(model)

    device = args.device

    # --- Collect TEST arrays (MSP from probs_all) ---
    y_test, msp_test, yhat_test, probs_task_test = _collect_y_score_pred_MSP(
        model, test_loader, device, exclude_last_class=exclude_last_class
    )

    # --- EXACT top-k coverage metrics on TEST ---
    metrics, accept_masks_by_c, taus_test = _evaluate_exact_topk(
        y_true=y_test,
        scores_test=msp_test,
        yhat_test=yhat_test,
        probs_task_test=probs_task_test,
        coverages=coverages
    )

    # --- RC curve & AURC/E-AURC on dense prefixes (MSP order) ---
    rc = rc_curve_and_aurc(y_test, msp_test, yhat_test)

    # --- Add overall_ECE and RC meta into the summary dict ---
    metrics["overall_ECE"] = overall_ece(probs_task_test, y_test, yhat_test, n_bins=15)
    metrics["_rc_curve"]   = rc

    # --- Save everything ---
    os.makedirs(args.output_dir, exist_ok=True)

    # Save taus (we use TEST kth-scores here, matching the exact accept@c)
    with open(os.path.join(args.output_dir, f"taus_{save_prefix}.json"), "w") as f:
        json.dump({f"{c:.2f}": t for c, t in sorted(taus_test.items())}, f, indent=2)

    # Summary JSON (parity with earlier pipeline)
    with open(os.path.join(args.output_dir, f"selective_summary_{save_prefix}.json"), "w") as f:
        json.dump(metrics, f, indent=2)

    # RC CSV (dense prefixes)
    save_rc_csv(args.output_dir, rc, f"rc_curve_{save_prefix}.csv")

    # Per-example predictions
    examples = getattr(test_dataset, "examples", list(range(len(y_test))))
    with open(os.path.join(args.output_dir, f"predictions_{save_prefix}.txt"), "w") as f:
        for ex, pred in zip(examples, yhat_test):
            idx = ex.idx if hasattr(ex, "idx") else (ex if isinstance(ex, int) else getattr(ex, "id", None))
            if idx is None:
                idx = str(ex)
            f.write(f"{idx}\t{int(pred)}\n")

    # Detailed accepts (one row per example, flags for each coverage)
    cov_keys = sorted([float(k) for k in accept_masks_by_c.keys()])
    with open(os.path.join(args.output_dir, f"predictions_detailed_{save_prefix}.csv"), "w", newline="") as f:
        w = csv.writer(f)
        w.writerow(["idx", "pred_task", "selector_score_msp"] + [f"accept@{c:.2f}" for c in cov_keys])
        for i, ex in enumerate(examples):
            idx = ex.idx if hasattr(ex, "idx") else (ex if isinstance(ex, int) else getattr(ex, "id", None))
            if idx is None:
                idx = str(ex)
            accepts = [int(_np1(accept_masks_by_c[c])[i]) for c in cov_keys]
            w.writerow([idx, int(yhat_test[i]), float(msp_test[i])] + accepts)

    # 1) Overall metrics CSV
    save_overall_metrics_csv(
        args.output_dir,
        rc,
        metrics,
        filename=f"overall_metrics_{save_prefix}.csv"
    )

    # 2) Accuracy–Risk table for each requested coverage
    save_acc_risk_table_csv(
        args.output_dir,
        metrics,
        filename=f"acc_risk_{save_prefix}.csv"
    )

    # 3) Per-class selective metrics (TRUE class and PREDICTED class)
    n_classes_task = _np2(probs_task_test).shape[1]
    per_cls_true = compute_per_class_metrics_by_true(
        y_true=y_test,
        yhat=yhat_test,
        accept_masks_by_c=accept_masks_by_c,
        n_classes=n_classes_task
    )
    save_per_class_metrics_csv(
        args.output_dir,
        per_cls_true,
        filename=f"per_class_acc_risk_true_{save_prefix}.csv",
        predicted=False
    )

    per_cls_pred = compute_per_class_metrics_by_pred(
        y_true=y_test,
        yhat=yhat_test,
        accept_masks_by_c=accept_masks_by_c,
        n_classes=n_classes_task
    )
    save_per_class_metrics_csv(
        args.output_dir,
        per_cls_pred,
        filename=f"per_class_acc_risk_pred_{save_prefix}.csv",
        predicted=True
    )

    # --- Console logs (optional) ---
    lg.info("Plain task acc: %.4f", metrics["plain_task_acc"])
    lg.info("overall_ECE: %.4f", metrics["overall_ECE"])
    lg.info("AURC: %.6f | AURC_oracle: %.6f | E-AURC: %.6f", rc["AURC"], rc["AURC_oracle"], rc["E_AURC"])
    for c in sorted([k for k in metrics.keys() if isinstance(k, float)]):
        m = metrics[c]
        lg.info("c=%.2f | cov=%.5f | sel-acc=%.4f | sel-risk=%.4f | tau=%.6f | n=%d/%d | ECE@acc=%.4f",
                c, m["coverage"], m["selective_accuracy"], m["selective_risk"],
                m["tau"], m["n_accept"], m["n_total"], m["ECE_on_accepted"])

    return metrics

# =========================
# Example usage
# =========================
# metrics = test_prob_selective_SR(
#     args, model, tokenizer,
#     coverages=[0.3, 0.5, 0.7, 0.9],
#     exclude_last_class=True,     # slices off the last "abstain" class from probs_all
#     save_prefix="sr_msp"
# )








import torch
import torch.nn as nn
import torch.nn.functional as F
from peft import PeftModel  # remove if unused

class DecoderClassifierLTA(nn.Module):
    def __init__(self, encoder, config, tokenizer, args, num_classes: int):
        super().__init__()
        self.encoder = encoder
        self.config = config
        self.tokenizer = tokenizer
        self.args = args
        self.M = num_classes                        # task classes
        self.head = nn.Linear(config.hidden_size, self.M + 1)  # +1 = abstain
        self.dropout = nn.Dropout(getattr(args, "dropout_probability", 0.0))

        # freeze encoder (your current behavior)
        for p in self.encoder.parameters():
            p.requires_grad = False

    def _last_nonpad_index1(self, input_ids):
        if self.config.pad_token_id is None:
            return torch.full((input_ids.size(0),), input_ids.size(1)-1,
                              device=input_ids.device, dtype=torch.long)
        seq_len = torch.eq(input_ids, self.config.pad_token_id).int().argmax(-1) - 1
        seq_len = seq_len % input_ids.shape[-1]
        return seq_len.to(input_ids.device)

    def _last_nonpad_index(self, input_ids,logits):
        if self.config.pad_token_id is None:
            sequence_lengths = -1
        else:
            if input_ids is not None:
                # if no pad token found, use modulo instead of reverse indexing for ONNX compatibility
                sequence_lengths = torch.eq(input_ids, self.config.pad_token_id).int().argmax(-1) - 1
                sequence_lengths = sequence_lengths % input_ids.shape[-1]
                sequence_lengths = sequence_lengths.to(logits.device)
            else:
                sequence_lengths = -1
        return sequence_lengths

    @staticmethod
    def _sat_em_loss(pooled_logits, labels, epoch,
                     E_s=1, gamma=0.5, beta=0.01, M=None, weight=None):
        """
        pooled_logits: [B, M+1]  (last column is abstain)
        labels:        [B] (0..M-1)
        """
        probs_all = F.softmax(pooled_logits, dim=-1)     # [B, M+1]
        #print("sss",probs_all.shape)
        if M is None: M = probs_all.size(-1) - 1
        s_task = probs_all[:, :M]                        # [B, M]
        s_abs  = probs_all[:,  M]                        # [B]

        y = torch.as_tensor(labels, dtype=torch.long, device=pooled_logits.device).view(-1)
        y_oh = F.one_hot(y, num_classes=M).float()       # [B, M]

        # convex target over task classes
        if (epoch is None) or (epoch < E_s):
            t = y_oh
        else:
            with torch.no_grad():
                t = gamma * y_oh + (1.0 - gamma) * s_task

        log_s_task = torch.log(s_task.clamp(min=1e-12))  # [B, M]
        sat_task = (t * log_s_task).sum(dim=-1)          # [B]

        t_y = t.gather(1, y.view(-1,1)).squeeze(1)       # [B]
        log_s_abs = torch.log(s_abs.clamp(min=1e-12))    # [B]
        sat_abs = (1.0 - t_y) * log_s_abs                # [B]

        L_sat = -(sat_task + sat_abs).mean()

        # Entropy over task classes only
        entropy = -(s_task * log_s_task).sum(dim=-1).mean()

        # (Optional) class weighting only applies to CE; SAT+EM doesn’t use `weight`.
        return L_sat + beta * entropy

    def forward(
        self,
        input_ids=None,
        labels=None,
        weight=None,           # kept for API compat (used only if loss_mode="ce_task")
        epoch=None,            # needed for SAT+EM schedule
        loss_mode="sat_em",    # "sat_em" | "ce_task" (warm-up on task logits only) | None
        E_s=1, gamma=0.5, beta=0.01,
        **kwargs
    ):
        attention_mask = input_ids.ne(self.tokenizer.pad_token_id)

        if isinstance(self.encoder, PeftModel):
            outputs = self.encoder(input_ids)  # many PEFT LLMs ignore attention_mask
        else:
            outputs = self.encoder(input_ids, attention_mask=attention_mask)

        hidden_states = outputs[0]                     # [B, T, H]
        hidden_states = self.dropout(hidden_states)

        logits_all = self.head(hidden_states.to(self.head.weight.dtype))  # [B, T, M+1]
        

        B = input_ids.size(0)
        if self.config.pad_token_id is None and B != 1:
            raise ValueError("Batch>1 requires pad_token_id set.")

        seq_idx = self._last_nonpad_index(input_ids,logits_all)   # [B]
        pooled_logits = logits_all[torch.arange(B, device=logits_all.device), seq_idx]  # [B, M+1]
        probs_all = F.softmax(pooled_logits, dim=-1)
        #print(pooled_logits.shape)
        if labels is None or loss_mode is None:
            return pooled_logits, probs_all  # inference path

        # training path: compute requested loss inside forward
        if loss_mode == "sat_em":
            loss = self._sat_em_loss(
                pooled_logits, labels, epoch, E_s=E_s, gamma=gamma, beta=beta, M=self.M
            )
        elif loss_mode == "ce_task":
            # optional warm-up: CE over task logits only (ignore abstain)
            y = torch.as_tensor(labels, dtype=torch.long, device=pooled_logits.device).view(-1)
            loss_fct = nn.CrossEntropyLoss(weight=weight)
            loss = loss_fct(pooled_logits[:, :self.M], y)
        else:
            raise ValueError(f"Unknown loss_mode: {loss_mode}")

        return loss, probs_all


def main():
    parser = argparse.ArgumentParser()

    ## Required parameters
    parser.add_argument('--project', type=str, required=True, help="using dataset from this project.")
    parser.add_argument('--train_project', type=str, required=False, help="using training dataset from this project.")
    #parser.add_argument('--model_dir', type=str, required=True, help="directory to store the model weights.")
    parser.add_argument("--train_data_file", default=None, type=str, required=True,
                        help="The input training data file (a text file).")
    parser.add_argument("--output_dir", default=None, type=str, required=True,
                        help="The output directory where the model predictions and checkpoints will be written.")
    parser.add_argument('--test_cwe', type=str, default=None, required=False, help="using dataset from this CWE for testing.")
    
    # run dir
    parser.add_argument('--run_dir', type=str, default="runs", help="parent directory to store run stats.")

    ## Other parameters
    parser.add_argument("--max_source_length", default=400, type=int,
                        help="The maximum total source sequence length after tokenization. Sequences longer than this will be truncated, sequences shorter will be padded.")
    parser.add_argument("--eval_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")
    parser.add_argument("--test_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")
                    
    parser.add_argument("--model_type", default="codegen", type=str,
                        help="The model architecture to be fine-tuned.")
    parser.add_argument("--model_name_or_path", default=None, type=str,
                        help="The model checkpoint for weights initialization.")

    parser.add_argument("--mlm", action='store_true',
                        help="Train with masked-language modeling loss instead of language modeling.")
    parser.add_argument("--mlm_probability", type=float, default=0.15,
                        help="Ratio of tokens to mask for masked language modeling loss")

    parser.add_argument("--config_name", default="", type=str,
                        help="Optional pretrained config name or path if not the same as model_name_or_path")
    parser.add_argument("--tokenizer_name", default="", type=str,
                        help="Optional pretrained tokenizer name or path if not the same as model_name_or_path")
    parser.add_argument("--cache_dir", default="", type=str,
                        help="Optional directory to store the pre-trained models downloaded from s3 (instread of the default one)")
    parser.add_argument("--block_size", default=-1, type=int,
                        help="Optional input sequence length after tokenization."
                             "The training dataset will be truncated in block of this size for training."
                             "Default to the model max input length for single sentence inputs (take into account special tokens).")
    parser.add_argument("--do_train", action='store_true',
                        help="Whether to run training.")
    parser.add_argument("--do_eval", action='store_true',
                        help="Whether to run eval on the dev set.")
    parser.add_argument("--do_test", action='store_true',
                        help="Whether to run eval on the dev set.")
    parser.add_argument("--do_test_prob", action='store_true',
                        help="Whether to run eval and save the prediciton probabilities.")    
    parser.add_argument("--evaluate_during_training", action='store_true',
                        help="Run evaluation during training at each logging step.")
    parser.add_argument("--do_lower_case", action='store_true',
                        help="Set this flag if you are using an uncased model.")

    parser.add_argument("--weighted_sampler", action='store_true',
                        help="Whether to do project balanced sampler using WeightedRandomSampler.")
    # Soft F1 loss function
    parser.add_argument("--soft_f1", action='store_true',
                        help="Use soft f1 loss instead of regular cross entropy loss.")
    parser.add_argument("--class_weight", action='store_true',
                        help="Use class weight in the regular cross entropy loss.")
    parser.add_argument("--vul_weight", default=1.0, type=float,
                        help="Weight for the vulnerable class in the regular cross entropy loss.")

    parser.add_argument("--train_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for training.")
    parser.add_argument("--eval_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for evaluation.")
    parser.add_argument('--gradient_accumulation_steps', type=int, default=1,
                        help="Number of updates steps to accumulate before performing a backward/update pass.")
    parser.add_argument("--learning_rate", default=5e-5, type=float,
                        help="The initial learning rate for Adam.")
    parser.add_argument("--weight_decay", default=0.0, type=float,
                        help="Weight deay if we apply some.")
    parser.add_argument("--adam_epsilon", default=1e-8, type=float,
                        help="Epsilon for Adam optimizer.")
    parser.add_argument("--max_grad_norm", default=1.0, type=float,
                        help="Max gradient norm.")
    parser.add_argument("--num_train_epochs", default=1.0, type=float,
                        help="Total number of training epochs to perform.")
    parser.add_argument("--max_steps", default=-1, type=int,
                        help="If > 0: set total number of training steps to perform. Override num_train_epochs.")
    parser.add_argument("--warmup_steps", default=0, type=int,
                        help="Linear warmup over warmup_steps.")
    parser.add_argument("--warmup_ratio", default=0.1, type=float,
                        help="Linear warmup ratio over all steps.")

    parser.add_argument('--logging_steps', type=int, default=1000,
                        help="Log every X updates steps.")
    parser.add_argument('--save_steps', type=int, default=50,
                        help="Save checkpoint every X updates steps.")
    parser.add_argument('--save_total_limit', type=int, default=None,
                        help='Limit the total amount of checkpoints, delete the older checkpoints in the output_dir, does not delete by default')
    parser.add_argument("--eval_all_checkpoints", action='store_true',
                        help="Evaluate all checkpoints starting with the same prefix as model_name_or_path ending and ending with step number")
    parser.add_argument("--no_cuda", action='store_true',
                        help="Avoid using CUDA when available")
    parser.add_argument('--overwrite_output_dir', action='store_true',
                        help="Overwrite the content of the output directory")
    parser.add_argument('--overwrite_cache', action='store_true',
                        help="Overwrite the cached training and evaluation sets")
    parser.add_argument('--seed', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument('--epoch', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument("--local_rank", type=int, default=-1,
                        help="For distributed training: local_rank")
    parser.add_argument('--max-patience', type=int, default=-1, help="Max iterations for model with no improvement.")

    

    args = parser.parse_args()


    


    accelerator = Accelerator(gradient_accumulation_steps=args.gradient_accumulation_steps) 
    device = accelerator.device
    args.n_gpu = accelerator.num_processes
    args.device = device
    args.per_gpu_train_batch_size=args.train_batch_size 
    args.per_gpu_eval_batch_size=args.eval_batch_size // args.n_gpu
    # Setup logging
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s',
                        datefmt='%m/%d/%Y %H:%M:%S',
                        level=logging.INFO if args.local_rank in [-1, 0] else logging.WARN)
    logger.warning("device: %s, n_gpu: %s, distributed training: %s",
                   device, args.n_gpu, bool(args.n_gpu > 1))
    logger.info(accelerator.state, main_process_only=False)

    # Set seed
    set_seed(args.seed)

    args.start_epoch = 0
    args.start_step = 0
    checkpoint_last = os.path.join(args.output_dir, 'checkpoint-last')
    if os.path.exists(checkpoint_last) and os.listdir(checkpoint_last):
        args.model_name_or_path = os.path.join(checkpoint_last, 'model.bin')
        args.config_name = os.path.join(checkpoint_last, 'config.json')
        idx_file = os.path.join(checkpoint_last, 'idx_file.txt')
        with open(idx_file, encoding='utf-8') as idxf:
            args.start_epoch = int(idxf.readlines()[0].strip()) + 1

        step_file = os.path.join(checkpoint_last, 'step_file.txt')
        if os.path.exists(step_file):
            with open(step_file, encoding='utf-8') as stepf:
                args.start_step = int(stepf.readlines()[0].strip())

        logger.info("reload model from {}, resume from {} epoch".format(checkpoint_last, args.start_epoch))

    config_class, model_class, tokenizer_class = MODEL_CLASSES[args.model_type]
    config = config_class.from_pretrained(args.config_name if args.config_name else args.model_name_or_path,
                                          cache_dir=args.cache_dir if args.cache_dir else None)
    
    config.num_labels = 3
    if args.model_type not in ["codellama"]:
        tokenizer = tokenizer_class.from_pretrained(args.tokenizer_name,
                                                    do_lower_case=args.do_lower_case,
                                                    cache_dir=args.cache_dir if args.cache_dir else None)
    else:
        tokenizer = tokenizer_class.from_pretrained(args.tokenizer_name,
                                                    trust_remote_code=True)
    if args.block_size <= 0:
        args.block_size = tokenizer.max_len_single_sentence  # Our input block size will be the max possible for the model
    args.block_size = min(args.block_size, tokenizer.max_len_single_sentence)

    compute_dtype = getattr(torch, "bfloat16")
    quant_config = BitsAndBytesConfig(load_in_4bit=True, bnb_4bit_quant_type="nf4", bnb_4bit_compute_dtype=compute_dtype, bnb_4bit_use_double_quant=False)

    if args.model_name_or_path:
        if args.model_type in ["starcoder3b", "deepseek","incoder1b"]:
            model = model_class.from_pretrained(args.model_name_or_path,
                                                quantization_config=quant_config, trust_remote_code=True,
                                                torch_dtype = torch.bfloat16)
                                                #attn_implementation = "flash_attention_2")
        else:
            print("load from here")
            model = model_class.from_pretrained(args.model_name_or_path,
                                                torch_dtype = torch.bfloat16, quantization_config=quant_config, trust_remote_code=True)
    else:
        model = model_class(config)
    
    if tokenizer.pad_token is None:
        tokenizer.pad_token = tokenizer.eos_token

    #config.pad_token_id = tokenizer.convert_tokens_to_ids(tokenizer.pad_token)
    config.pad_token_id = tokenizer.pad_token_id

    #config.pad_token_id = tokenizer(tokenizer.pad_token, truncation=True)['input_ids'][0]
    if args.model_type in ['codellama', 'starcoder3b', "deepseek","incoder1b",'qwen7b']:
        model = DecoderClassifierLTA(model,config,tokenizer,args, num_classes=2) #DecoderClassifier(model,config,tokenizer,args)
    else:
        model = Model(model,config,tokenizer,args)

    logger.info("Training/evaluation parameters %s", args)
    
    if args.model_type in ['starcoder3b', 'incoder1b']:
        peft_params = LoraConfig(
        lora_alpha=16,
        lora_dropout=0.1,
        r=64,
        bias="none",
        task_type=TaskType.SEQ_CLS,   # sequence classification
        target_modules=["c_attn", "c_proj", "c_fc"]  # StarCoder modules
    )
    elif args.model_type in ['incoder1b']:
        peft_params = LoraConfig(
        task_type=TaskType.SEQ_CLS,   # decoder-only causal LM
        r=64,
        lora_alpha=16,
        lora_dropout=0.1,
        bias="none",
        # GPT-2/Incoder module names:
        target_modules=["c_attn", "c_proj", "c_fc"],
        fan_in_fan_out=True,                # important for GPT-2/Conv1D
        # keep classifier head (if any) trainable:
        
)
    else:
        peft_params = LoraConfig(
        lora_alpha=16,
        lora_dropout=0.1,
        r=64,
        bias="none",
        task_type=TaskType.SEQ_CLS
    )

    model = get_peft_model(model, peft_params)
    # Training
    if args.do_train:
        with accelerator.main_process_first():
            train_dataset = TextDataset(tokenizer, args, args.train_data_file)
            eval_dataset = TextDataset(tokenizer, args, args.eval_data_file)

        train(args, accelerator, train_dataset, eval_dataset, model, tokenizer)


    results = {}
    if args.do_eval and args.local_rank in [-1, 0]:
        checkpoint_prefix = f'checkpoint-best-f1/baseline1/model.bin'
        output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))  
        model.load_state_dict(torch.load(output_dir), strict=False)      
        model.to(args.device)
    
    if args.do_test_prob and args.local_rank in [-1, 0]:
        from safetensors.torch import load_file
        checkpoint_path = "baseline1_saved_models/checkpoint-best-f1/baseline1/model.safetensors"  # Adjust path
        state_dict = load_file(checkpoint_path)

        # Save as model.bin
        torch.save(state_dict, "baseline1_saved_models/checkpoint-best-acc/baseline1/model.bin")

        checkpoint_prefix = f'checkpoint-best-acc/baseline1/model.bin'
        output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))  
        model.load_state_dict(torch.load(output_dir), strict=False)                  
        model.to(args.device)
        #test_prob(args, model, tokenizer)
        test_prob_selective_SR(args, model, tokenizer, coverages=[round(x,2) for x in np.arange(0.1, 1.01, 0.1)], exclude_last_class=True)  # True if your head is (M+1) with last=abstain)
    
    return results


if __name__ == "__main__":
    main()

