from __future__ import absolute_import, division, print_function

import argparse
import logging
import os

import math

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import numpy as np
import torch
from torch.utils.data import DataLoader, Dataset, SequentialSampler,RandomSampler
from torch.utils.data.distributed import DistributedSampler
import json


from tqdm import tqdm, trange
import multiprocessing
from model import Model, DecoderClassifier

cpu_cont = multiprocessing.cpu_count()

from accelerate import Accelerator
from accelerate.logging import get_logger
from accelerate.utils import set_seed

from transformers import BitsAndBytesConfig, TrainingArguments, pipeline
from peft import LoraConfig
from peft import get_peft_config, PeftModel, PeftConfig, get_peft_model, LoraConfig, TaskType
from torch.optim import AdamW
cpu_cont = multiprocessing.cpu_count()
from torch.optim import AdamW
from transformers import (WEIGHTS_NAME, get_linear_schedule_with_warmup,
                          BertConfig, BertForMaskedLM, BertTokenizer, BertForSequenceClassification,
                          GPT2Config, GPT2LMHeadModel, GPT2Tokenizer,
                          OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer,
                          RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer,
                          DistilBertConfig, DistilBertForMaskedLM, DistilBertForSequenceClassification, DistilBertTokenizer)

logger = logging.getLogger(__name__)

from transformers import (WEIGHTS_NAME, get_linear_schedule_with_warmup, get_scheduler,
                          BertConfig, BertForMaskedLM, BertTokenizer, BertForSequenceClassification,
                          GPT2Config, GPT2LMHeadModel, GPT2Tokenizer,
                          OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer,
                          RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer,
                          DistilBertConfig, DistilBertForMaskedLM, DistilBertForSequenceClassification, DistilBertTokenizer, 
                          AutoConfig, AutoModel, AutoTokenizer)

logger = logging.getLogger(__name__)

MODEL_CLASSES = {
    'gpt2': (GPT2Config, GPT2LMHeadModel, GPT2Tokenizer),
    'openai-gpt': (OpenAIGPTConfig, OpenAIGPTLMHeadModel, OpenAIGPTTokenizer),
    'bert': (BertConfig, BertForSequenceClassification, BertTokenizer),
    'roberta': (RobertaConfig, RobertaForSequenceClassification, RobertaTokenizer),
    'distilbert': (DistilBertConfig, DistilBertForSequenceClassification, DistilBertTokenizer),
    'codellama' : (AutoConfig,AutoModel, AutoTokenizer),
    'deepseek' : (AutoConfig,AutoModel, AutoTokenizer),
    'qwen7b' : (AutoConfig,AutoModel, AutoTokenizer),
    'starcoder3b' : (AutoConfig,AutoModel, AutoTokenizer),
    'incoder1b' : (AutoConfig,AutoModel, AutoTokenizer),
    'codegemma' : (AutoConfig,AutoModel, AutoTokenizer)
    }


from plots import draw_uce_reliability_graph, draw_reliability_graph
from sklearn.metrics import roc_auc_score
#from emsemble import *
from scaling import *
from platt_scaling import *

from torch import nn, optim
from torch.nn import functional as F



class InputFeatures(object):
    """A single training/test features for a example."""
    def __init__(self,
                 input_tokens,
                 input_ids,
                 idx,
                 label,

    ):
        self.input_tokens = input_tokens
        self.input_ids = input_ids
        self.idx=str(idx)
        self.label=label

def convert_examples_to_features(js,tokenizer,args):
    code = js['func']
    if args.model_type in ["codellama"]:
        code_tokens = tokenizer.tokenize(code)
        if '</s>' in code_tokens:
            code_tokens = code_tokens[:code_tokens.index('</s>')]
        source_tokens = code_tokens[:args.block_size]
    elif args.model_type in ["starcoder3b", "deepseek", "incoder1b",'qwen7b']:
        code_tokens=tokenizer.tokenize(code)
        source_tokens = code_tokens[:args.block_size]
    else:
        code_tokens=tokenizer.tokenize(code)
        code_tokens = code_tokens[:args.block_size-2]
        source_tokens =[tokenizer.cls_token]+code_tokens+[tokenizer.sep_token]
    if args.model_type in ["codellama"]:
        source_ids = tokenizer.encode(js['func'].split("</s>")[0], max_length=args.block_size, padding='max_length', truncation=True)
    else:
        source_ids = tokenizer.encode(
            code,
            max_length=args.block_size,
            padding='max_length',
            truncation=True,
            add_special_tokens=False,  # decoder-only style
        )

        #source_ids =  tokenizer.convert_tokens_to_ids(source_tokens)
        #padding_length = args.block_size - len(source_ids)
        #source_ids+=[tokenizer.pad_token_id]*padding_length
    return InputFeatures(source_tokens,source_ids,js['idx'],js['target'])

class TextDataset(Dataset):
    def __init__(self, tokenizer, args, file_path=None):
        self.examples = []
        with open(file_path) as f:
            for line in f:
                js=json.loads(line.strip())
                self.examples.append(convert_examples_to_features(js,tokenizer,args))


    def __len__(self):
        return len(self.examples)

    def __getitem__(self, i):       
        return torch.tensor(self.examples[i].input_ids),torch.tensor(self.examples[i].label)

import random
def set_seed(seed=42):
    random.seed(seed)
    os.environ['PYHTONHASHSEED'] = str(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)
    torch.backends.cudnn.deterministic = True


def train_deep_ensemble(args,num_models=5):
    
    base_dir = os.path.join( "./", "identifiers")
    os.makedirs(base_dir, exist_ok=True)
    
    trained_model_paths = []
    for i in range(num_models):
        seed = args.seed + i
        set_seed(seed)

        model_dir = os.path.join(base_dir, f"test_renamed_{i+1}.jsonl")
        #os.makedirs(model_dir, exist_ok=True)
        args.output_dir = model_dir

        trained_model_paths.append(model_dir)

    return trained_model_paths




def load_ensemble_models( tokenizer, model_paths, args):
    """
    Load multiple trained models from different file paths.

    Args:
        model_class: The model architecture (e.g., RoBERTa, BERT).
        config: Model configuration.
        tokenizer: Tokenizer for the model.
        model_paths: List of trained model directories.

    Returns:
        models: List of loaded models.
    """
    dataloaders = [] 
    for path in model_paths:
        test_dataset = TextDataset(tokenizer, args, path)
        test_sampler = SequentialSampler(test_dataset)
        test_dataloader = DataLoader(test_dataset, sampler=test_sampler,
                                 batch_size=args.eval_batch_size, num_workers=8, pin_memory=True)
        
        dataloaders.append(test_dataloader)

    return dataloaders


def deep_ensemble_predictions(model, dataloaders):
    """
    Perform inference with an ensemble of models and collect predictions.

    Args:
        models: List of trained models.
        dataloader: DataLoader with input samples.

    Returns:
        ensemble_logits: Tensor of shape (num_models, batch_size, num_classes).
    """
    #num_models = len(models)
    ensemble_logits = []

    for dataloader in dataloaders:
        batch_logits = []
        with torch.no_grad():
            for batch in tqdm(dataloader):
                inputs = batch[0].cuda()
                logits = model(input_ids=inputs)  # Get raw logits
                batch_logits.append(logits)
        ensemble_logits.append(torch.cat(batch_logits))

    return torch.stack(ensemble_logits)  # Shape: (num_models, batch_size, num_classes)


def save_samples(method, mc_samples, ind = "path", base_dir="identifiers"):
    """Saves Monte Carlo Dropout samples."""
    method_dir = os.path.join(base_dir, method)
    os.makedirs(method_dir, exist_ok=True)
    if ind == "eval":
        mc_path = os.path.join(method_dir, "eval_identifiers_samples.pt")
        torch.save(mc_samples, mc_path)
    else: 
        mc_path = os.path.join(method_dir, "test_identifiers_samples.pt")
        torch.save(mc_samples, mc_path)

def load_samples(method, ind = "path", base_dir="uncertainty" ):
    """Loads Monte Carlo Dropout samples if they exist."""
    method_dir = os.path.join(base_dir, method)
    if ind == "eval":
        mc_path = os.path.join(method_dir, "eval_identifiers_samples.pt")
    else:
        mc_path = os.path.join(method_dir, "test_mcd_samples.pt")
    
    if os.path.exists(mc_path):
        return torch.load(mc_path)
    return None




def get_threshold(
    uncertainty,   # array-like, shape (N,) – higher = more uncertain
    labels,        # array-like, shape (N,) – ground-truth class ids
    preds,         # array-like, shape (N,) – predicted class ids
    min_frac=0.30, # minimum fraction of samples the selected group must cover
    n_thresholds=200,
):
    """
    For classification: compute correctness from labels & preds,
    then sweep thresholds on 'uncertainty' and pick the group (>= or <)
    with the highest misprediction rate, subject to a min coverage.

    Returns a dict with the chosen threshold and summary stats.
    """
    u = uncertainty.detach().cpu().numpy()
    u = np.asarray(u, dtype=float)
    y = labels.detach().cpu().numpy()
    y = np.asarray(y)
    yhat = preds.detach().cpu().numpy()
    yhat = np.asarray(yhat)

    if not (u.shape == y.shape == yhat.shape):
        raise ValueError("uncertainty, labels, preds must have the same shape.")

    # correctness (1 = correct, 0 = incorrect) and mispred (1 = incorrect)
    correct = (yhat == y).astype(int)
    mispred = 1 - correct

    # drop NaNs in uncertainty if any
    keep = ~np.isnan(u)
    u = u[keep]; mispred = mispred[keep]; correct = correct[keep]
    N = len(u)
    if N == 0:
        raise ValueError("No valid samples after filtering.")

    min_samples = max(1, int(np.ceil(min_frac * N)))
    lo, hi = float(np.min(u)), float(np.max(u))
    thresholds = np.array([lo]) if np.isclose(lo, hi) else np.linspace(lo, hi, n_thresholds)

    best = {
        "best_threshold": None,
        "group": None,  # "above" (u >= t) or "below" (u < t)
        "misp_rate_pct": -1.0,
        "misp_count": 0,
        "total_in_group": 0,
        "coverage_pct": 0.0,
        "global_misp_rate_pct": 100.0 * mispred.mean(),
        "n_samples": N,
    }

    for t in thresholds:
        idx_hi = (u >= t)
        idx_lo = ~idx_hi

        for name, idx in (("above", idx_hi), ("below", idx_lo)):
            k = int(idx.sum())
            if k < min_samples:
                continue
            rate = float(mispred[idx].mean())  # fraction wrong in this group
            # prefer higher mispred rate; break ties by larger coverage
            better = rate > (best["misp_rate_pct"] / 100.0)
            tie = np.isclose(rate, best["misp_rate_pct"] / 100.0) and k > best["total_in_group"]
            if better or tie:
                best.update({
                    "best_threshold": float(t),
                    "group": name,
                    "misp_rate_pct": 100.0 * rate,
                    "misp_count": int(mispred[idx].sum()),
                    "total_in_group": k,
                    "coverage_pct": 100.0 * k / N,
                })

    # If nothing met coverage, fall back to reporting global stats
    if best["best_threshold"] is None:
        best.update({
            "best_threshold": float(hi),
            "group": "all",
            "misp_rate_pct": 100.0 * mispred.mean(),
            "misp_count": int(mispred.sum()),
            "total_in_group": N,
            "coverage_pct": 100.0,
        })

    # Also return masks at the chosen threshold for downstream use
    t = best["best_threshold"]
    idx_above = (u >= t)
    idx_below = ~idx_above
    best["mask_above"] = idx_above
    best["mask_below"] = idx_below
    best["correct"] = correct  # 1 = correct, 0 = incorrect
    best["mispred"] = mispred  # 1 = incorrect, 0 = correct
    return best


metrics_rows = []
bins_rows = []

def _to_float(x):
    try:
        import torch
        if isinstance(x, torch.Tensor):
            return float(x.detach().cpu().item())
    except Exception:
        pass
    try:
        return float(x)
    except Exception:
        return x

def record_result(method, stage, ECE, ACC, MAX_ECE, brier_score, UCE=None, MAX_UCE=None, uncertain_bin=None):
    metrics_rows.append({
        "method": method, "stage": stage,
        "ECE": _to_float(ECE), "MAX_ECE": _to_float(MAX_ECE),
        "UCE": _to_float(UCE) if UCE is not None else None,
        "MAX_UCE": _to_float(MAX_UCE) if MAX_UCE is not None else None,
        "Brier": _to_float(brier_score), "ACC": _to_float(ACC),
    })
    if isinstance(uncertain_bin, dict):
        for k, v in uncertain_bin.items():
            bins_rows.append({"method": method, "stage": stage, "bin": str(k), "value": _to_float(v)})

def write_excel_per_method(method, method_dir, one_sheet=True):
    """Write an Excel file for this method into its directory."""
    mdf = pd.DataFrame([r for r in metrics_rows if r["method"] == method])
    bdf = pd.DataFrame([r for r in bins_rows    if r["method"] == method])

    os.makedirs(method_dir, exist_ok=True)
    xlsx_path = os.path.join(method_dir, f"{method}_calibration.xlsx")

    with pd.ExcelWriter(xlsx_path, engine="openpyxl") as w:
        if one_sheet:
            # one sheet named 'summary': metrics first, then bins below
            mdf.to_excel(w, index=False, sheet_name="summary", startrow=0)
            startrow = len(mdf) + 2
            # small label row
            pd.DataFrame({"section": ["uncertainty_bins"]}).to_excel(
                w, index=False, sheet_name="summary", startrow=startrow, header=False
            )
            bdf.to_excel(w, index=False, sheet_name="summary", startrow=startrow + 1)
        else:
            # two sheets
            mdf.to_excel(w, index=False, sheet_name="metrics")
            bdf.to_excel(w, index=False, sheet_name="uncertainty_bins")

    print(f"[OK] Wrote {xlsx_path}")



def get_predictions(model, dataloader, args):
        
        prediction_probs = []
        labels_list = []
        pred_list = []

        model.eval()

        with torch.no_grad():
            for batch in tqdm(dataloader, desc="Evaluating"):
                inputs = batch[0].cuda()
                labels = batch[1].cuda()
                logits = model(input_ids=inputs)

                probs = logits #F.softmax(logits, dim=-1)
               
                preds = torch.argmax(probs, dim=1)
                
                

                prediction_probs.append(probs)
                
                labels_list.append(labels)
                pred_list.append(preds)


        predictions = torch.cat(prediction_probs).cuda() 
        label = torch.cat(labels_list).cuda()
        pred = torch.cat(pred_list).cuda()

        return predictions, label, pred


def compute_per_set_accuracy(prob_sets, test_labels):
    """
    Args:
        prob_sets: Tensor of shape (num_sets, num_instances, num_classes)
        test_labels: Tensor of shape (num_instances,)

    Returns:
        List of accuracy scores for each set
    """
    preds = torch.argmax(prob_sets, dim=-1)  # shape: (num_sets, num_instances)
    accuracies = []

    for i in range(prob_sets.shape[0]):
        correct = (preds[i] == test_labels).sum().item()
        total = test_labels.size(0)
        acc = correct / total
        accuracies.append(acc)

    return accuracies

from collections import Counter

def compute_majority_vote_accuracy(prob_sets, test_labels):
    """
    Args:
        prob_sets: Tensor of shape (num_sets, num_instances, num_classes)
        test_labels: Tensor of shape (num_instances,)

    Returns:
        accuracy: float, accuracy after majority vote across sets
        majority_preds: Tensor of shape (num_instances,)
    """
    preds = torch.argmax(prob_sets, dim=-1)  # shape: (num_sets, num_instances)
    num_sets, num_instances = preds.shape

    # Perform majority vote for each instance
    majority_preds = []

    for i in range(num_instances):
        votes = preds[:, i].tolist()  # votes from each set
        most_common_label, _ = Counter(votes).most_common(1)[0]
        majority_preds.append(most_common_label)

    majority_preds = torch.tensor(majority_preds, device=test_labels.device)

    # Compute accuracy
    correct = (majority_preds == test_labels).sum().item()
    accuracy = correct / num_instances

    return accuracy, majority_preds

def analyze_prediction_changes(orig_preds, mv_preds, test_labels):
    """
    Args:
        orig_preds: Tensor of shape (num_instances,)
        mv_preds: Tensor of shape (num_instances,)
        test_labels: Tensor of shape (num_instances,)

    Returns:
        A dictionary of counts:
            - num_initial_correct
            - num_initial_incorrect
            - correct_to_wrong
            - wrong_to_correct
            - unchanged_correct
            - unchanged_wrong
    """
    assert orig_preds.shape == mv_preds.shape == test_labels.shape

    initial_correct = orig_preds == test_labels
    majority_correct = mv_preds == test_labels

    correct_to_wrong = (initial_correct & ~majority_correct).sum().item()
    wrong_to_correct = (~initial_correct & majority_correct).sum().item()
    unchanged_correct = (initial_correct & majority_correct).sum().item()
    unchanged_wrong = (~initial_correct & ~majority_correct).sum().item()

    return {
        "num_initial_correct": initial_correct.sum().item(),
        "num_initial_incorrect": (~initial_correct).sum().item(),
        "correct_to_wrong": correct_to_wrong,
        "wrong_to_correct": wrong_to_correct,
        "unchanged_correct": unchanged_correct,
        "unchanged_wrong": unchanged_wrong
    }



def cumulative_majority_vote_analysis(prob_sets, orig_preds, test_labels):
    """
    Args:
        prob_sets: Tensor of shape (num_sets, num_instances, num_classes)
        orig_preds: Tensor of shape (num_instances,) from the original model
        test_labels: Tensor of shape (num_instances,)

    Returns:
        A list of dicts containing change statistics at each ensemble step
    """
    num_sets, num_instances, _ = prob_sets.shape
    all_preds = torch.argmax(prob_sets, dim=-1)  # shape: (num_sets, num_instances)
    
    initial_correct_mask = (orig_preds == test_labels)
    
    results = []

    for k in range(1, num_sets + 1):
        votes = all_preds[:k]  # (k, num_instances)
        majority_preds = []

        for i in range(num_instances):
            vote_list = votes[:, i].tolist()
            most_common_label, _ = Counter(vote_list).most_common(1)[0]
            majority_preds.append(most_common_label)

        majority_preds = torch.tensor(majority_preds, device=test_labels.device)
        current_correct_mask = (majority_preds == test_labels)

        correct_to_wrong = (initial_correct_mask & ~current_correct_mask).sum().item()
        wrong_to_correct = (~initial_correct_mask & current_correct_mask).sum().item()
        unchanged_correct = (initial_correct_mask & current_correct_mask).sum().item()
        unchanged_wrong = (~initial_correct_mask & ~current_correct_mask).sum().item()

        results.append({
            "k_sets_used": k,
            "accuracy": current_correct_mask.sum().item() / num_instances,
            "num_initial_correct": initial_correct_mask.sum().item(),
            "num_initial_incorrect": (~initial_correct_mask).sum().item(),
            "correct_to_wrong": correct_to_wrong,
            "wrong_to_correct": wrong_to_correct,
            "unchanged_correct": unchanged_correct,
            "unchanged_wrong": unchanged_wrong,
            "net_change": wrong_to_correct - correct_to_wrong,
            "total_changed": correct_to_wrong + wrong_to_correct,
        })

    return results

def new_cumulative_majority_vote_analysis(ensemble_logits_list, original_preds, true_labels):
    """
    Args:
        ensemble_logits_list: list of [N, C] tensors from multiple sets
        original_preds: [N] tensor of predictions from original (before denoising)
        true_labels: [N] tensor of ground-truth labels
    """
    num_sets = len(ensemble_logits_list)
    N = true_labels.shape[0]
    results = []

    # Convert original to predicted class if logits
    if original_preds.dim() == 2:
        original_preds = original_preds.argmax(dim=1)

    # For tracking previous W→C flips
    prev_wtc_set = set()

    for k in range(1, num_sets + 1):
        # Majority vote over first k sets
        logits_stack = torch.stack(ensemble_logits_list[:k], dim=0)  # [k, N, C]
        preds = logits_stack.argmax(dim=2)  # [k, N]

        # Majority vote
        maj_preds = []
        for i in range(N):
            votes = preds[:, i].tolist()
            vote_counts = Counter(votes)
            majority = vote_counts.most_common(1)[0][0]
            maj_preds.append(majority)
        maj_preds = torch.tensor(maj_preds)

        correct_to_wrong = []
        wrong_to_correct = []
        correct_to_correct = []
        wrong_to_wrong = []

        wtc_ids = set()

        for i in range(N):
            orig_correct = original_preds[i].item() == true_labels[i].item()
            new_correct = maj_preds[i].item() == true_labels[i].item()

            if orig_correct and not new_correct:
                correct_to_wrong.append(i)
            elif not orig_correct and new_correct:
                wrong_to_correct.append(i)
                wtc_ids.add(i)
            elif orig_correct and new_correct:
                correct_to_correct.append(i)
            else:
                wrong_to_wrong.append(i)

        # Compare to previous set's W→C set
        if k > 1:
            new_flips = wtc_ids - prev_wtc_set
            common_flips = wtc_ids & prev_wtc_set
        else:
            new_flips = wtc_ids
            common_flips = set()

        prev_wtc_set = wtc_ids

        results.append({
            "k_sets_used": k,
            "accuracy": (maj_preds == true_labels).float().mean().item(),
            "correct_to_wrong": len(correct_to_wrong),
            "wrong_to_correct": len(wrong_to_correct),
            "net_change": len(wrong_to_correct) - len(correct_to_wrong),
            "total_changed": len(wrong_to_correct) + len(correct_to_wrong),
            "new_flipped_ids": list(sorted(new_flips)),
            "common_flipped_ids": list(sorted(common_flips)),
        })

    return results




def main():
    parser = argparse.ArgumentParser()

    ## Required parameters
    parser.add_argument('--project', type=str, required=True, help="using dataset from this project.")
    parser.add_argument("--train_data_file", default=None, type=str, required=True,
                        help="The input training data file (a text file).")
    parser.add_argument("--output_dir", default=None, type=str, required=True,
                        help="The output directory where the model predictions and checkpoints will be written.")

    ## Other parameters
    parser.add_argument("--eval_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")
    parser.add_argument("--test_data_file", default=None, type=str,
                        help="An optional input evaluation data file to evaluate the perplexity on (a text file).")
                    
    parser.add_argument("--model_type", default="bert", type=str,
                        help="The model architecture to be fine-tuned.")
    parser.add_argument("--model_name_or_path", default=None, type=str,
                        help="The model checkpoint for weights initialization.")

    parser.add_argument("--mlm", action='store_true',
                        help="Train with masked-language modeling loss instead of language modeling.")
    parser.add_argument("--mlm_probability", type=float, default=0.15,
                        help="Ratio of tokens to mask for masked language modeling loss")

    parser.add_argument("--config_name", default="", type=str,
                        help="Optional pretrained config name or path if not the same as model_name_or_path")
    parser.add_argument("--tokenizer_name", default="", type=str,
                        help="Optional pretrained tokenizer name or path if not the same as model_name_or_path")
    parser.add_argument("--cache_dir", default="", type=str,
                        help="Optional directory to store the pre-trained models downloaded from s3 (instread of the default one)")
    parser.add_argument("--block_size", default=-1, type=int,
                        help="Optional input sequence length after tokenization."
                             "The training dataset will be truncated in block of this size for training."
                             "Default to the model max input length for single sentence inputs (take into account special tokens).")
    parser.add_argument("--do_train", action='store_true',
                        help="Whether to run training.")
    parser.add_argument("--do_eval", action='store_true',
                        help="Whether to run eval on the dev set.")
    parser.add_argument("--do_test", action='store_true',
                        help="Whether to run eval on the dev set.")    
    parser.add_argument("--evaluate_during_training", action='store_true',
                        help="Run evaluation during training at each logging step.")
    parser.add_argument("--do_lower_case", action='store_true',
                        help="Set this flag if you are using an uncased model.")

    parser.add_argument("--train_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for training.")
    parser.add_argument("--eval_batch_size", default=4, type=int,
                        help="Batch size per GPU/CPU for evaluation.")
    parser.add_argument('--gradient_accumulation_steps', type=int, default=1,
                        help="Number of updates steps to accumulate before performing a backward/update pass.")
    parser.add_argument("--learning_rate", default=5e-5, type=float,
                        help="The initial learning rate for Adam.")
    parser.add_argument("--weight_decay", default=0.0, type=float,
                        help="Weight deay if we apply some.")
    parser.add_argument("--adam_epsilon", default=1e-8, type=float,
                        help="Epsilon for Adam optimizer.")
    parser.add_argument("--max_grad_norm", default=1.0, type=float,
                        help="Max gradient norm.")
    parser.add_argument("--num_train_epochs", default=2.0, type=float,
                        help="Total number of training epochs to perform.")
    parser.add_argument("--max_steps", default=-1, type=int,
                        help="If > 0: set total number of training steps to perform. Override num_train_epochs.")
    parser.add_argument("--warmup_steps", default=0, type=int,
                        help="Linear warmup over warmup_steps.")

    parser.add_argument('--logging_steps', type=int, default=50,
                        help="Log every X updates steps.")
    parser.add_argument('--save_steps', type=int, default=50,
                        help="Save checkpoint every X updates steps.")
    parser.add_argument('--save_total_limit', type=int, default=None,
                        help='Limit the total amount of checkpoints, delete the older checkpoints in the output_dir, does not delete by default')
    parser.add_argument("--eval_all_checkpoints", action='store_true',
                        help="Evaluate all checkpoints starting with the same prefix as model_name_or_path ending and ending with step number")
    parser.add_argument("--no_cuda", action='store_true',
                        help="Avoid using CUDA when available")
    parser.add_argument('--overwrite_output_dir', action='store_true',
                        help="Overwrite the content of the output directory")
    parser.add_argument('--overwrite_cache', action='store_true',
                        help="Overwrite the cached training and evaluation sets")
    parser.add_argument('--seed', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument('--epoch', type=int, default=42,
                        help="random seed for initialization")
    parser.add_argument('--fp16', action='store_true',
                        help="Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit")
    parser.add_argument('--fp16_opt_level', type=str, default='O1',
                        help="For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3']."
                             "See details at https://nvidia.github.io/apex/amp.html")
    parser.add_argument("--local_rank", type=int, default=-1,
                        help="For distributed training: local_rank")
    parser.add_argument('--server_ip', type=str, default='', help="For distant debugging.")
    parser.add_argument('--server_port', type=str, default='', help="For distant debugging.")

    # Add early stopping parameters and dropout probability parameters
    parser.add_argument("--early_stopping_patience", type=int, default=None,
                        help="Number of epochs with no improvement after which training will be stopped.")
    parser.add_argument("--min_loss_delta", type=float, default=0.001,
                        help="Minimum change in the loss required to qualify as an improvement.")
    parser.add_argument('--dropout_probability', type=float, default=0, help='dropout probability')


    

    args = parser.parse_args()

    accelerator = Accelerator(gradient_accumulation_steps=args.gradient_accumulation_steps) 
    device = accelerator.device
    args.n_gpu = accelerator.num_processes
    args.device = device
    args.per_gpu_train_batch_size=args.train_batch_size 
    args.per_gpu_eval_batch_size=args.eval_batch_size // args.n_gpu
    # Setup logging
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s',
                        datefmt='%m/%d/%Y %H:%M:%S',
                        level=logging.INFO if args.local_rank in [-1, 0] else logging.WARN)
    logger.warning("device: %s, n_gpu: %s, distributed training: %s",
                   device, args.n_gpu, bool(args.n_gpu > 1))
    #logger.info(accelerator.state, main_process_only=False)

    # Set seed
    set_seed(args.seed)

    args.start_epoch = 0
    args.start_step = 0
    checkpoint_last = os.path.join(args.output_dir, 'checkpoint-last')
    if os.path.exists(checkpoint_last) and os.listdir(checkpoint_last):
        args.model_name_or_path = os.path.join(checkpoint_last, 'model.bin')
        args.config_name = os.path.join(checkpoint_last, 'config.json')
        idx_file = os.path.join(checkpoint_last, 'idx_file.txt')
        with open(idx_file, encoding='utf-8') as idxf:
            args.start_epoch = int(idxf.readlines()[0].strip()) + 1

        step_file = os.path.join(checkpoint_last, 'step_file.txt')
        if os.path.exists(step_file):
            with open(step_file, encoding='utf-8') as stepf:
                args.start_step = int(stepf.readlines()[0].strip())

        logger.info("reload model from {}, resume from {} epoch".format(checkpoint_last, args.start_epoch))

    config_class, model_class, tokenizer_class = MODEL_CLASSES[args.model_type]
    config = config_class.from_pretrained(args.config_name if args.config_name else args.model_name_or_path,
                                          cache_dir=args.cache_dir if args.cache_dir else None)
    
    config.num_labels = 2
    if args.model_type not in ["codellama"]:
        tokenizer = tokenizer_class.from_pretrained(args.tokenizer_name,
                                                    do_lower_case=args.do_lower_case,
                                                    cache_dir=args.cache_dir if args.cache_dir else None)
    else:
        tokenizer = tokenizer_class.from_pretrained(args.tokenizer_name,
                                                    trust_remote_code=True)
    if args.block_size <= 0:
        args.block_size = tokenizer.max_len_single_sentence  # Our input block size will be the max possible for the model
    args.block_size = min(args.block_size, tokenizer.max_len_single_sentence)

    compute_dtype = getattr(torch, "bfloat16")
    quant_config = BitsAndBytesConfig(load_in_4bit=True, bnb_4bit_quant_type="nf4", bnb_4bit_compute_dtype=compute_dtype, bnb_4bit_use_double_quant=False)

    if args.model_name_or_path:
        if args.model_type in ["starcoder3b", "deepseek","incoder1b"]:
            model = model_class.from_pretrained(args.model_name_or_path,
                                                quantization_config=quant_config, trust_remote_code=True,
                                                torch_dtype = torch.bfloat16)
                                                #attn_implementation = "flash_attention_2")
        else:
            print("load from here")
            model = model_class.from_pretrained(args.model_name_or_path,
                                                torch_dtype = torch.bfloat16, quantization_config=quant_config, trust_remote_code=True)
    else:
        model = model_class(config)
    
    if tokenizer.pad_token is None:
        tokenizer.pad_token = tokenizer.eos_token

    #config.pad_token_id = tokenizer.convert_tokens_to_ids(tokenizer.pad_token)
    config.pad_token_id = tokenizer.pad_token_id

    #config.pad_token_id = tokenizer(tokenizer.pad_token, truncation=True)['input_ids'][0]
    if args.model_type in ['codellama', 'starcoder3b', "deepseek","incoder1b",'qwen7b']:
        model = DecoderClassifier(model,config,tokenizer,args)
    else:
        model = Model(model,config,tokenizer,args)

    logger.info("Training/evaluation parameters %s", args)
    
    if args.model_type in ['starcoder3b', 'incoder1b']:
        peft_params = LoraConfig(
        lora_alpha=16,
        lora_dropout=0.1,
        r=64,
        bias="none",
        task_type=TaskType.SEQ_CLS,   # sequence classification
        target_modules=["c_attn", "c_proj", "c_fc"]  # StarCoder modules
    )
    elif args.model_type in ['incoder1b']:
        peft_params = LoraConfig(
        task_type=TaskType.SEQ_CLS,   # decoder-only causal LM
        r=64,
        lora_alpha=16,
        lora_dropout=0.1,
        bias="none",
        # GPT-2/Incoder module names:
        target_modules=["c_attn", "c_proj", "c_fc"],
        fan_in_fan_out=True,                # important for GPT-2/Conv1D
        # keep classifier head (if any) trainable:
        
)
    else:
        peft_params = LoraConfig(
        lora_alpha=16,
        lora_dropout=0.1,
        r=64,
        bias="none",
        task_type=TaskType.SEQ_CLS
    )

    model = get_peft_model(model, peft_params)
    


    logger.info("Training/evaluation parameters %s", args)




    checkpoint_prefix = f'checkpoint-best-acc/{args.project}/model.bin'
    output_dir = os.path.join(args.output_dir, '{}'.format(checkpoint_prefix))  
    model.load_state_dict(torch.load(output_dir), strict=False)                  
    model.to(args.device)



    test_dataset = TextDataset(tokenizer, args, args.test_data_file)
    test_sampler = SequentialSampler(test_dataset)
    test_dataloader = DataLoader(test_dataset, sampler=test_sampler,
                                 batch_size=1, num_workers=8, pin_memory=True)


    test_probs, test_label, test_preds = get_predictions(model, test_dataloader, args)


    method = "ensemble"
    test_ensemble_logits = load_samples(method, ind = "test")  # Load MCD samples if they exist

    if test_ensemble_logits is None:
        trained_model_paths = train_deep_ensemble(args,num_models=5)
        dataloaders = load_ensemble_models(tokenizer, trained_model_paths, args)
                # Get Deep Ensemble logit samples
        test_ensemble_logits = deep_ensemble_predictions(model, dataloaders)  # Shape: (num_models, batch_size, num_classes)
        save_samples(method, test_ensemble_logits, ind = "test")

    accs = compute_per_set_accuracy(test_ensemble_logits, test_label)
    for i, acc in enumerate(accs):
        print(f"Set {i} Accuracy: {acc:.4f}")

    mv_acc, mv_preds = compute_majority_vote_accuracy(test_ensemble_logits, test_label)
    print(f"Majority Vote Accuracy: {mv_acc:.4f}")


    change_stats = analyze_prediction_changes(test_preds, mv_preds, test_label)
    for k, v in change_stats.items():
        print(f"{k}: {v}")


    stats = cumulative_majority_vote_analysis(test_ensemble_logits, test_preds, test_label)

    for step in stats:
        print(f"Sets 1-{step['k_sets_used']}: acc={step['accuracy']:.4f}, "
          f"CTW={step['correct_to_wrong']}, WTC={step['wrong_to_correct']}, "
          f"Net={step['net_change']}, Total Changed={step['total_changed']}")

    stats = new_cumulative_majority_vote_analysis(test_ensemble_logits, test_preds, test_label)

    for step in stats:
        print(f"Sets 1-{step['k_sets_used']}: acc={step['accuracy']:.4f}, "
          f"CTW={step['correct_to_wrong']}, WTC={step['wrong_to_correct']}, "
          f"Net={step['net_change']}, Total Changed={step['total_changed']}, "
          f"New flips: {len(step['new_flipped_ids'])}, "
          f"Common flips: {len(step['common_flipped_ids'])}")


    
if __name__ == '__main__':
    main()
